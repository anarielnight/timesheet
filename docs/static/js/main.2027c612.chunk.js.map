{"version":3,"sources":["ColorModeSwitcher.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","originalTasks","id","timeStart","timeEnd","date","task","isLogged","App","useState","tasks","setTasks","taskID","setTaskID","theme","map","href","isExternal","isChecked","onChange","curTask","isNumeric","onSubmit","event","preventDefault","concat","length","type","value","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2027c612.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  ChakraProvider,\n  Button,\n  Link,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Switch,\n  theme,\n  Table,\n  Thead,\n  Tbody,\n  Tfoot,\n  Tr,\n  Th,\n  Td,\n  TableCaption,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\n\nconst originalTasks = [\n  {\n    id: 1,\n    timeStart: '10:45',\n    timeEnd: '13:55',\n    date: '05.05.2021',\n    task: '10467',\n    isLogged: true\n  },\n  {\n    id: 2,\n    timeStart: '15:45',\n    timeEnd: '17:05',\n    date: '04.05.2021',\n    task: '94902',\n    isLogged: false\n  },\n  {\n    id: 3,\n    timeStart: '14:45',\n    timeEnd: '17:50',\n    date: '05.04.2021',\n    task: '3552',\n    isLogged: true\n  },\n  {\n    id: 4,\n    timeStart: '10:45',\n    timeEnd: '13:15',\n    date: '15.05.2021',\n    task: '3461',\n    isLogged: false\n  }\n];\n\nfunction App() {\n  const [tasks, setTasks] = useState(originalTasks);\n  const [taskID, setTaskID] = useState('');\n  return (\n    <ChakraProvider theme={theme}>\n      <Table variant=\"simple\">\n        <TableCaption>Timesheet</TableCaption>\n        <Thead>\n          <Tr>\n            <Th>Time Start</Th>\n            <Th>Time End</Th>\n            <Th>Date</Th>\n            <Th>Task</Th>\n            <Th>Logged</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {tasks.map((task)=>(\n            <Tr key={task.id}>\n              <Td>{task.timeStart}</Td>\n              <Td>{task.timeEnd}</Td>\n              <Td>{task.date}</Td>\n              <Td><Link href={`https://redmine.globexit.ru/issues/`+task.task} isExternal>{task.task}</Link></Td>\n              <Td><Switch size=\"lg\" isChecked={task.isLogged} onChange={() => {\n                setTasks(tasks.map((curTask) => {\n                  if (curTask.id === task.id) {\n                    return {\n                      ...curTask,\n                      isLogged: !curTask.isLogged\n                    }\n                  }\n                  return curTask;\n                }))\n              }}/></Td>\n            </Tr>\n          ))}\n        </Tbody>\n        <Tfoot>\n          <Tr>\n            <Th><ColorModeSwitcher/></Th>\n            <Th>into</Th>\n            <Th>into</Th>\n            <Th>into</Th>\n            <Th isNumeric>multiply by</Th>\n          </Tr>\n        </Tfoot>\n      </Table>\n\n      <form onSubmit={(event)=>{\n        event.preventDefault(); \n        setTasks(tasks.concat([  \n          {\n            id: tasks.length + 1,\n            timeStart: '10:45',\n            timeEnd: '13:15',\n            date: '15.05.2021',\n            task: taskID,\n            isLogged: false\n          }\n        ]));\n        setTaskID('');\n      }}>\n        <FormControl id=\"task\">\n          <FormLabel>Task ID</FormLabel>\n          <Input type=\"text\" value={taskID} onChange={(event) => {\n              setTaskID(event.target.value);\n            }}/>\n          <FormHelperText></FormHelperText>\n        </FormControl>\n        <Button type='submit'>Send</Button>\n      </form>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}